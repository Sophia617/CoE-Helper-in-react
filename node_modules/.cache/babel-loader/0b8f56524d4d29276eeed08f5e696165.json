{"ast":null,"code":"var _jsxFileName = \"/Users/eunyeong/Desktop/React Project/CoE_Helper/CoE_Helper/src/components/FeesCalculator/InputFieldsList.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport InputGroupsDisplay from \"./InputGroupsDisplay\";\n\nconst InputFieldsList = ({\n  sumChanged\n}) => {\n  const [inputGroupIDArray, setInputGroupIDArray] = useState([{\n    id: Math.random() * 1000\n  }]);\n  const [inputGroupValuesArray, setInputGroupValuesArray] = useState([]);\n  const [inputGroupTotalFeesArray, setInputGroupTotalFeesArray] = useState([]);\n  const [showDeleteBtn, setShowDeleteBtn] = useState(false);\n  useEffect(() => {\n    calculateTotalSum();\n  }, [inputGroupTotalFeesArray]);\n  /*****************************\n   *  Handle User Inputs\n   * *****************************/\n\n  const inputTextHandler = (e, id) => {\n    let copiedInputGroupValuesArray = inputGroupValuesArray;\n    let inputValuesInRow = {\n      id: id,\n      subjectFees: 0,\n      subjectNumbers: 0\n    };\n    let name = e.target.name;\n    let inputValue = parseFloat(e.target.value);\n    let index = copiedInputGroupValuesArray.map(userInputs => userInputs.id).indexOf(id);\n\n    if (index === -1) {\n      inputValuesInRow = { ...inputValuesInRow,\n        [name]: inputValue\n      };\n      copiedInputGroupValuesArray = [...copiedInputGroupValuesArray, inputValuesInRow];\n    } else {\n      inputValuesInRow = { ...copiedInputGroupValuesArray[index],\n        [name]: inputValue\n      };\n      copiedInputGroupValuesArray[index] = inputValuesInRow;\n    }\n\n    setInputGroupValuesArray([...copiedInputGroupValuesArray]);\n    calculateInputGroupFees(id, inputValuesInRow);\n  };\n  /**********************************************\n   *  calculate fees for user Inputs Groups (row)\n   * **********************************************/\n\n\n  const calculateInputGroupFees = (id, inputValuesInRow) => {\n    let totalFeesInRow = {\n      id: id,\n      feesInTotal: parseFloat(inputValuesInRow.subjectFees * inputValuesInRow.subjectNumbers).toFixed(2)\n    };\n    let copiedInputGroupTotalFeesArray = [...inputGroupTotalFeesArray];\n    let index = copiedInputGroupTotalFeesArray.map(totalSumItem => totalSumItem.id).indexOf(id);\n\n    if (index === -1) {\n      copiedInputGroupTotalFeesArray = [...inputGroupTotalFeesArray, totalFeesInRow];\n    } else {\n      copiedInputGroupTotalFeesArray[index].feesInTotal = totalFeesInRow.feesInTotal;\n    }\n\n    setInputGroupTotalFeesArray([...copiedInputGroupTotalFeesArray]);\n  }; // calculate sum of total fees in row\n\n\n  const calculateTotalSum = () => {\n    const totalSumArray = [...inputGroupTotalFeesArray].map(item => parseFloat(item.feesInTotal));\n\n    if (totalSumArray.length > 0) {\n      const reducer = (accumulator, currentValue) => accumulator + currentValue;\n\n      let totalSum = totalSumArray.reduce(reducer);\n      sumChanged(totalSum);\n    }\n\n    if (totalSumArray.length === 0) {\n      sumChanged(0);\n    }\n  };\n  /**********************************\n   *  Add and Delete InputGroups\n   * ********************************/\n  //  Add a new InputGroup: When click '+' button\n\n\n  const addInputGroup = () => {\n    const newInputGroupId = {\n      id: Math.random() * 1000\n    };\n    setInputGroupIDArray([...inputGroupIDArray, newInputGroupId]);\n\n    if (!showDeleteBtn) {\n      setShowDeleteBtn(true);\n    }\n  }; // Delete InputGroup row --> When click 'trash bin' button\n\n\n  const deleteInputGroup = id => {\n    const copiedInputGroupIDArray = [...inputGroupIDArray];\n    const copiedInputGroupValuesArray = [...inputGroupValuesArray];\n    const copiedInputGroupTotalFeesArray = [...inputGroupTotalFeesArray];\n    let inputGroupIdIndex = copiedInputGroupIDArray.map(inputGroup => inputGroup.id).indexOf(id);\n    let inputValuesIndex = copiedInputGroupValuesArray.map(userInputValues => userInputValues.id).indexOf(id);\n    let totalFeesIndex = copiedInputGroupTotalFeesArray.map(totalFees => totalFees.id).indexOf(id);\n\n    if (inputGroupIdIndex > -1) {\n      copiedInputGroupIDArray.splice(inputGroupIdIndex, 1);\n      console.log(\"hello\");\n    }\n\n    if (inputValuesIndex > -1) {\n      copiedInputGroupValuesArray.splice(inputValuesIndex, 1);\n    }\n\n    if (totalFeesIndex > -1) {\n      copiedInputGroupTotalFeesArray.splice(totalFeesIndex, 1);\n    }\n\n    if (copiedInputGroupIDArray.length === 1) {\n      setShowDeleteBtn(false);\n    }\n\n    setInputGroupIDArray([...copiedInputGroupIDArray]);\n    setInputGroupValuesArray([...copiedInputGroupValuesArray]);\n    setInputGroupTotalFeesArray([...copiedInputGroupTotalFeesArray]);\n  };\n\n  return /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 5\n    }\n  }, inputGroupIDArray.map((inputGroup, index) => {\n    return /*#__PURE__*/React.createElement(InputGroupsDisplay, {\n      id: inputGroup.id,\n      key: inputGroup.id,\n      addClickHandler: addInputGroup,\n      deleteClickHandler: deleteInputGroup,\n      inputTextHandler: e => inputTextHandler(e, inputGroup.id),\n      showDeleteBtn: showDeleteBtn,\n      inputGroupTotalFeesObj: inputGroupTotalFeesArray.find(item => item.id === inputGroup.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }\n    });\n  }));\n};\n\nexport default InputFieldsList;","map":{"version":3,"sources":["/Users/eunyeong/Desktop/React Project/CoE_Helper/CoE_Helper/src/components/FeesCalculator/InputFieldsList.js"],"names":["React","useState","useEffect","Form","InputGroupsDisplay","InputFieldsList","sumChanged","inputGroupIDArray","setInputGroupIDArray","id","Math","random","inputGroupValuesArray","setInputGroupValuesArray","inputGroupTotalFeesArray","setInputGroupTotalFeesArray","showDeleteBtn","setShowDeleteBtn","calculateTotalSum","inputTextHandler","e","copiedInputGroupValuesArray","inputValuesInRow","subjectFees","subjectNumbers","name","target","inputValue","parseFloat","value","index","map","userInputs","indexOf","calculateInputGroupFees","totalFeesInRow","feesInTotal","toFixed","copiedInputGroupTotalFeesArray","totalSumItem","totalSumArray","item","length","reducer","accumulator","currentValue","totalSum","reduce","addInputGroup","newInputGroupId","deleteInputGroup","copiedInputGroupIDArray","inputGroupIdIndex","inputGroup","inputValuesIndex","userInputValues","totalFeesIndex","totalFees","splice","console","log","find"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport InputGroupsDisplay from \"./InputGroupsDisplay\";\n\nconst InputFieldsList = ({ sumChanged }) => {\n  const [inputGroupIDArray, setInputGroupIDArray] = useState([\n    { id: Math.random() * 1000 },\n  ]);\n  const [inputGroupValuesArray, setInputGroupValuesArray] = useState([]);\n  const [inputGroupTotalFeesArray, setInputGroupTotalFeesArray] = useState([]);\n  const [showDeleteBtn, setShowDeleteBtn] = useState(false);\n\n  useEffect(() => {\n    calculateTotalSum();\n  }, [inputGroupTotalFeesArray]);\n\n  /*****************************\n   *  Handle User Inputs\n   * *****************************/\n  const inputTextHandler = (e, id) => {\n    let copiedInputGroupValuesArray = inputGroupValuesArray;\n    let inputValuesInRow = {\n      id: id,\n      subjectFees: 0,\n      subjectNumbers: 0,\n    };\n    let name = e.target.name;\n    let inputValue = parseFloat(e.target.value);\n\n    let index = copiedInputGroupValuesArray\n      .map((userInputs) => userInputs.id)\n      .indexOf(id);\n\n    if (index === -1) {\n      inputValuesInRow = {\n        ...inputValuesInRow,\n        [name]: inputValue,\n      };\n      copiedInputGroupValuesArray = [\n        ...copiedInputGroupValuesArray,\n        inputValuesInRow,\n      ];\n    } else {\n      inputValuesInRow = {\n        ...copiedInputGroupValuesArray[index],\n        [name]: inputValue,\n      };\n      copiedInputGroupValuesArray[index] = inputValuesInRow;\n    }\n    setInputGroupValuesArray([...copiedInputGroupValuesArray]);\n    calculateInputGroupFees(id, inputValuesInRow);\n  };\n\n  /**********************************************\n   *  calculate fees for user Inputs Groups (row)\n   * **********************************************/\n\n  const calculateInputGroupFees = (id, inputValuesInRow) => {\n    let totalFeesInRow = {\n      id: id,\n      feesInTotal: parseFloat(\n        inputValuesInRow.subjectFees * inputValuesInRow.subjectNumbers\n      ).toFixed(2),\n    };\n    let copiedInputGroupTotalFeesArray = [...inputGroupTotalFeesArray];\n    let index = copiedInputGroupTotalFeesArray\n      .map((totalSumItem) => totalSumItem.id)\n      .indexOf(id);\n    if (index === -1) {\n      copiedInputGroupTotalFeesArray = [\n        ...inputGroupTotalFeesArray,\n        totalFeesInRow,\n      ];\n    } else {\n      copiedInputGroupTotalFeesArray[index].feesInTotal =\n        totalFeesInRow.feesInTotal;\n    }\n    setInputGroupTotalFeesArray([...copiedInputGroupTotalFeesArray]);\n  };\n\n  // calculate sum of total fees in row\n  const calculateTotalSum = () => {\n    const totalSumArray = [...inputGroupTotalFeesArray].map((item) =>\n      parseFloat(item.feesInTotal)\n    );\n    if (totalSumArray.length > 0) {\n      const reducer = (accumulator, currentValue) => accumulator + currentValue;\n      let totalSum = totalSumArray.reduce(reducer);\n      sumChanged(totalSum);\n    }\n    if (totalSumArray.length === 0) {\n        sumChanged(0);\n    }\n  };\n\n  /**********************************\n   *  Add and Delete InputGroups\n   * ********************************/\n\n  //  Add a new InputGroup: When click '+' button\n  const addInputGroup = () => {\n    const newInputGroupId = { id: Math.random() * 1000 };\n    setInputGroupIDArray([...inputGroupIDArray, newInputGroupId]);\n    if (!showDeleteBtn) {\n      setShowDeleteBtn(true);\n    }\n  };\n\n  // Delete InputGroup row --> When click 'trash bin' button\n  const deleteInputGroup = (id) => {\n    const copiedInputGroupIDArray = [...inputGroupIDArray];\n    const copiedInputGroupValuesArray = [...inputGroupValuesArray];\n    const copiedInputGroupTotalFeesArray = [...inputGroupTotalFeesArray];\n\n    let inputGroupIdIndex = copiedInputGroupIDArray\n      .map((inputGroup) => inputGroup.id)\n      .indexOf(id);\n    let inputValuesIndex = copiedInputGroupValuesArray\n      .map((userInputValues) => userInputValues.id)\n      .indexOf(id);\n    let totalFeesIndex = copiedInputGroupTotalFeesArray\n      .map((totalFees) => totalFees.id)\n      .indexOf(id);\n\n    if (inputGroupIdIndex > -1) {\n      copiedInputGroupIDArray.splice(inputGroupIdIndex, 1);\n      console.log(\"hello\");\n    }\n\n    if (inputValuesIndex > -1) {\n      copiedInputGroupValuesArray.splice(inputValuesIndex, 1);\n    }\n\n    if (totalFeesIndex > -1) {\n      copiedInputGroupTotalFeesArray.splice(totalFeesIndex, 1);\n    }\n\n    if (copiedInputGroupIDArray.length === 1) {\n      setShowDeleteBtn(false);\n    }\n\n    setInputGroupIDArray([...copiedInputGroupIDArray]);\n    setInputGroupValuesArray([...copiedInputGroupValuesArray]);\n    setInputGroupTotalFeesArray([...copiedInputGroupTotalFeesArray]);\n  };\n\n  return (\n    <Form>\n      {inputGroupIDArray.map((inputGroup, index) => {\n        return (\n          <InputGroupsDisplay\n            id={inputGroup.id}\n            key={inputGroup.id}\n            addClickHandler={addInputGroup}\n            deleteClickHandler={deleteInputGroup}\n            inputTextHandler={(e) => inputTextHandler(e, inputGroup.id)}\n            showDeleteBtn={showDeleteBtn}\n            inputGroupTotalFeesObj={inputGroupTotalFeesArray.find(\n              (item) => item.id === inputGroup.id\n            )}\n          />\n        );\n      })}\n    </Form>\n  );\n};\n\nexport default InputFieldsList;\n"]},"metadata":{},"sourceType":"module"}