{"ast":null,"code":"import _toConsumableArray from\"/Users/eunyeong/Desktop/React Project/CoE_Helper/CoE_Helper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _defineProperty from\"/Users/eunyeong/Desktop/React Project/CoE_Helper/CoE_Helper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/eunyeong/Desktop/React Project/CoE_Helper/CoE_Helper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/eunyeong/Desktop/React Project/CoE_Helper/CoE_Helper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{Form}from\"react-bootstrap\";import InputGroupsDisplay from\"./InputGroupsDisplay\";var InputFieldsList=function InputFieldsList(_ref){var sumChanged=_ref.sumChanged;var _useState=useState([{id:Math.random()*1000}]),_useState2=_slicedToArray(_useState,2),inputGroupIDArray=_useState2[0],setInputGroupIDArray=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),inputGroupValuesArray=_useState4[0],setInputGroupValuesArray=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),inputGroupTotalFeesArray=_useState6[0],setInputGroupTotalFeesArray=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),showDeleteBtn=_useState8[0],setShowDeleteBtn=_useState8[1];useEffect(function(){calculateTotalSum();},[inputGroupTotalFeesArray]);/*****************************\n   *  Handle User Inputs\n   * *****************************/var _inputTextHandler=function inputTextHandler(e,id){var copiedInputGroupValuesArray=inputGroupValuesArray;var inputValuesInRow={id:id,subjectFees:0,subjectNumbers:0};var name=e.target.name;var inputValue=parseFloat(e.target.value);var index=copiedInputGroupValuesArray.map(function(userInputs){return userInputs.id;}).indexOf(id);if(index===-1){inputValuesInRow=_objectSpread(_objectSpread({},inputValuesInRow),{},_defineProperty({},name,inputValue));copiedInputGroupValuesArray=[].concat(_toConsumableArray(copiedInputGroupValuesArray),[inputValuesInRow]);}else{inputValuesInRow=_objectSpread(_objectSpread({},copiedInputGroupValuesArray[index]),{},_defineProperty({},name,inputValue));copiedInputGroupValuesArray[index]=inputValuesInRow;}setInputGroupValuesArray(_toConsumableArray(copiedInputGroupValuesArray));calculateInputGroupFees(id,inputValuesInRow);};/**********************************************\n   *  calculate fees for user Inputs Groups (row)\n   * **********************************************/var calculateInputGroupFees=function calculateInputGroupFees(id,inputValuesInRow){var totalFeesInRow={id:id,feesInTotal:parseFloat(inputValuesInRow.subjectFees*inputValuesInRow.subjectNumbers).toFixed(2)};var copiedInputGroupTotalFeesArray=_toConsumableArray(inputGroupTotalFeesArray);var index=copiedInputGroupTotalFeesArray.map(function(totalSumItem){return totalSumItem.id;}).indexOf(id);if(index===-1){copiedInputGroupTotalFeesArray=[].concat(_toConsumableArray(inputGroupTotalFeesArray),[totalFeesInRow]);}else{copiedInputGroupTotalFeesArray[index].feesInTotal=totalFeesInRow.feesInTotal;}setInputGroupTotalFeesArray(_toConsumableArray(copiedInputGroupTotalFeesArray));};// calculate sum of total fees in row\nvar calculateTotalSum=function calculateTotalSum(){var totalSumArray=_toConsumableArray(inputGroupTotalFeesArray).map(function(item){return parseFloat(item.feesInTotal);});if(totalSumArray.length>0){var reducer=function reducer(accumulator,currentValue){return accumulator+currentValue;};var totalSum=totalSumArray.reduce(reducer);sumChanged(totalSum);}if(totalSumArray.length===0){sumChanged(0);}};/**********************************\n   *  Add and Delete InputGroups\n   * ********************************/ //  Add a new InputGroup: When click '+' button\nvar addInputGroup=function addInputGroup(){var newInputGroupId={id:Math.random()*1000};setInputGroupIDArray([].concat(_toConsumableArray(inputGroupIDArray),[newInputGroupId]));if(!showDeleteBtn){setShowDeleteBtn(true);}};// Delete InputGroup row --> When click 'trash bin' button\nvar deleteInputGroup=function deleteInputGroup(id){var copiedInputGroupIDArray=_toConsumableArray(inputGroupIDArray);var copiedInputGroupValuesArray=_toConsumableArray(inputGroupValuesArray);var copiedInputGroupTotalFeesArray=_toConsumableArray(inputGroupTotalFeesArray);var inputGroupIdIndex=copiedInputGroupIDArray.map(function(inputGroup){return inputGroup.id;}).indexOf(id);var inputValuesIndex=copiedInputGroupValuesArray.map(function(userInputValues){return userInputValues.id;}).indexOf(id);var totalFeesIndex=copiedInputGroupTotalFeesArray.map(function(totalFees){return totalFees.id;}).indexOf(id);if(inputGroupIdIndex>-1){copiedInputGroupIDArray.splice(inputGroupIdIndex,1);console.log(\"hello\");}if(inputValuesIndex>-1){copiedInputGroupValuesArray.splice(inputValuesIndex,1);}if(totalFeesIndex>-1){copiedInputGroupTotalFeesArray.splice(totalFeesIndex,1);}if(copiedInputGroupIDArray.length===1){setShowDeleteBtn(false);}setInputGroupIDArray(_toConsumableArray(copiedInputGroupIDArray));setInputGroupValuesArray(_toConsumableArray(copiedInputGroupValuesArray));setInputGroupTotalFeesArray(_toConsumableArray(copiedInputGroupTotalFeesArray));};return/*#__PURE__*/React.createElement(Form,null,inputGroupIDArray.map(function(inputGroup){return/*#__PURE__*/React.createElement(InputGroupsDisplay,{id:inputGroup.id,key:inputGroup.id,addClickHandler:addInputGroup,deleteClickHandler:deleteInputGroup,inputTextHandler:function inputTextHandler(e){return _inputTextHandler(e,inputGroup.id);},showDeleteBtn:showDeleteBtn,inputGroupTotalFeesObj:inputGroupTotalFeesArray.find(function(item){return item.id===inputGroup.id;})});}));};export default InputFieldsList;","map":{"version":3,"sources":["/Users/eunyeong/Desktop/React Project/CoE_Helper/CoE_Helper/src/components/FeesCalculator/InputFieldsList.js"],"names":["React","useState","useEffect","Form","InputGroupsDisplay","InputFieldsList","sumChanged","id","Math","random","inputGroupIDArray","setInputGroupIDArray","inputGroupValuesArray","setInputGroupValuesArray","inputGroupTotalFeesArray","setInputGroupTotalFeesArray","showDeleteBtn","setShowDeleteBtn","calculateTotalSum","inputTextHandler","e","copiedInputGroupValuesArray","inputValuesInRow","subjectFees","subjectNumbers","name","target","inputValue","parseFloat","value","index","map","userInputs","indexOf","calculateInputGroupFees","totalFeesInRow","feesInTotal","toFixed","copiedInputGroupTotalFeesArray","totalSumItem","totalSumArray","item","length","reducer","accumulator","currentValue","totalSum","reduce","addInputGroup","newInputGroupId","deleteInputGroup","copiedInputGroupIDArray","inputGroupIdIndex","inputGroup","inputValuesIndex","userInputValues","totalFeesIndex","totalFees","splice","console","log","find"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport InputGroupsDisplay from \"./InputGroupsDisplay\";\n\nconst InputFieldsList = ({ sumChanged }) => {\n  const [inputGroupIDArray, setInputGroupIDArray] = useState([\n    { id: Math.random() * 1000 },\n  ]);\n  const [inputGroupValuesArray, setInputGroupValuesArray] = useState([]);\n  const [inputGroupTotalFeesArray, setInputGroupTotalFeesArray] = useState([]);\n  const [showDeleteBtn, setShowDeleteBtn] = useState(false);\n\n  useEffect(() => {\n    calculateTotalSum();\n  }, [inputGroupTotalFeesArray]);\n\n  /*****************************\n   *  Handle User Inputs\n   * *****************************/\n  const inputTextHandler = (e, id) => {\n    let copiedInputGroupValuesArray = inputGroupValuesArray;\n    let inputValuesInRow = {\n      id: id,\n      subjectFees: 0,\n      subjectNumbers: 0,\n    };\n    let name = e.target.name;\n    let inputValue = parseFloat(e.target.value);\n\n    let index = copiedInputGroupValuesArray\n      .map((userInputs) => userInputs.id)\n      .indexOf(id);\n\n    if (index === -1) {\n      inputValuesInRow = {\n        ...inputValuesInRow,\n        [name]: inputValue,\n      };\n      copiedInputGroupValuesArray = [\n        ...copiedInputGroupValuesArray,\n        inputValuesInRow,\n      ];\n    } else {\n      inputValuesInRow = {\n        ...copiedInputGroupValuesArray[index],\n        [name]: inputValue,\n      };\n      copiedInputGroupValuesArray[index] = inputValuesInRow;\n    }\n    setInputGroupValuesArray([...copiedInputGroupValuesArray]);\n    calculateInputGroupFees(id, inputValuesInRow);\n  };\n\n  /**********************************************\n   *  calculate fees for user Inputs Groups (row)\n   * **********************************************/\n\n  const calculateInputGroupFees = (id, inputValuesInRow) => {\n    let totalFeesInRow = {\n      id: id,\n      feesInTotal: parseFloat(\n        inputValuesInRow.subjectFees * inputValuesInRow.subjectNumbers\n      ).toFixed(2),\n    };\n    let copiedInputGroupTotalFeesArray = [...inputGroupTotalFeesArray];\n    let index = copiedInputGroupTotalFeesArray\n      .map((totalSumItem) => totalSumItem.id)\n      .indexOf(id);\n    if (index === -1) {\n      copiedInputGroupTotalFeesArray = [\n        ...inputGroupTotalFeesArray,\n        totalFeesInRow,\n      ];\n    } else {\n      copiedInputGroupTotalFeesArray[index].feesInTotal =\n        totalFeesInRow.feesInTotal;\n    }\n    setInputGroupTotalFeesArray([...copiedInputGroupTotalFeesArray]);\n  };\n\n  // calculate sum of total fees in row\n  const calculateTotalSum = () => {\n    const totalSumArray = [...inputGroupTotalFeesArray].map((item) =>\n      parseFloat(item.feesInTotal)\n    );\n    if (totalSumArray.length > 0) {\n      const reducer = (accumulator, currentValue) => accumulator + currentValue;\n      let totalSum = totalSumArray.reduce(reducer);\n      sumChanged(totalSum);\n    }\n    if (totalSumArray.length === 0) {\n        sumChanged(0);\n    }\n  };\n\n  /**********************************\n   *  Add and Delete InputGroups\n   * ********************************/\n\n  //  Add a new InputGroup: When click '+' button\n  const addInputGroup = () => {\n    const newInputGroupId = { id: Math.random() * 1000 };\n    setInputGroupIDArray([...inputGroupIDArray, newInputGroupId]);\n    if (!showDeleteBtn) {\n      setShowDeleteBtn(true);\n    }\n  };\n\n  // Delete InputGroup row --> When click 'trash bin' button\n  const deleteInputGroup = (id) => {\n    const copiedInputGroupIDArray = [...inputGroupIDArray];\n    const copiedInputGroupValuesArray = [...inputGroupValuesArray];\n    const copiedInputGroupTotalFeesArray = [...inputGroupTotalFeesArray];\n\n    let inputGroupIdIndex = copiedInputGroupIDArray\n      .map((inputGroup) => inputGroup.id)\n      .indexOf(id);\n    let inputValuesIndex = copiedInputGroupValuesArray\n      .map((userInputValues) => userInputValues.id)\n      .indexOf(id);\n    let totalFeesIndex = copiedInputGroupTotalFeesArray\n      .map((totalFees) => totalFees.id)\n      .indexOf(id);\n\n    if (inputGroupIdIndex > -1) {\n      copiedInputGroupIDArray.splice(inputGroupIdIndex, 1);\n      console.log(\"hello\");\n    }\n\n    if (inputValuesIndex > -1) {\n      copiedInputGroupValuesArray.splice(inputValuesIndex, 1);\n    }\n\n    if (totalFeesIndex > -1) {\n      copiedInputGroupTotalFeesArray.splice(totalFeesIndex, 1);\n    }\n\n    if (copiedInputGroupIDArray.length === 1) {\n      setShowDeleteBtn(false);\n    }\n\n    setInputGroupIDArray([...copiedInputGroupIDArray]);\n    setInputGroupValuesArray([...copiedInputGroupValuesArray]);\n    setInputGroupTotalFeesArray([...copiedInputGroupTotalFeesArray]);\n  };\n\n  return (\n    <Form>\n      {inputGroupIDArray.map((inputGroup) => {\n        return (\n          <InputGroupsDisplay\n            id={inputGroup.id}\n            key={inputGroup.id}\n            addClickHandler={addInputGroup}\n            deleteClickHandler={deleteInputGroup}\n            inputTextHandler={(e) => inputTextHandler(e, inputGroup.id)}\n            showDeleteBtn={showDeleteBtn}\n            inputGroupTotalFeesObj={inputGroupTotalFeesArray.find(\n              (item) => item.id === inputGroup.id\n            )}\n          />\n        );\n      })}\n    </Form>\n  );\n};\n\nexport default InputFieldsList;\n"]},"metadata":{},"sourceType":"module"}